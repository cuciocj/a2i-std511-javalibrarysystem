package yib00005xs.std511.library.form;

import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import yib00005xs.std511.library.controller.TransactionController;
import yib00005xs.std511.library.dao.StudentDao;
import yib00005xs.std511.library.model.Admin;
import yib00005xs.std511.library.model.Book;
import yib00005xs.std511.library.model.Student;
import yib00005xs.std511.library.model.Transaction;

/**
 *
 * @author CJ Cucio
 */
public class BorrowDialog extends javax.swing.JDialog {

    private final List<Book> books;

    private Map<String, Student> studentsMap;

    private List<String> studentsList;

    /**
     * Creates new form BorrowDialog
     */
    public BorrowDialog(java.awt.Frame parent, boolean modal, List<Book> books) {
        super(parent, modal);
        this.books = books;

        // initialize dropdown first before initComponents
        initializeStudentDropDown();
        initComponents();
        initializeBookTable();
    }

    public void initializeStudentDropDown() {
        List<Student> students = new StudentDao().list();
        studentsList = new ArrayList<>();
        studentsMap = new LinkedHashMap<>();
        for (Student s : students) {
            String key = s.getSchoolId() + "|" + s.getName();
            studentsMap.put(key, s);
            studentsList.add(key);
        }
    }

    public void initializeBookTable() {
        DefaultTableModel model = initializeBookColumns();

        for (Book book : books) {
            Object[] obj = new Object[]{
                book.getIsbn(),
                book.getTitle(),
                book.getAuthor(),
                book.getGenre(),
                book.getPublisher(),
                book.getPublicationYear(),
                book.getQuantity()
            };

            model.addRow(obj);
        }

        tblBorrowList.setModel(model);
    }

    public DefaultTableModel initializeBookColumns() {
        DefaultTableModel model = new DefaultTableModel() {
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };

        model.addColumn("ISBN");
        model.addColumn("title");
        model.addColumn("author");
        model.addColumn("genre");
        model.addColumn("publisher");
        model.addColumn("year");
        model.addColumn("copies left");

        return model;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        drpStudentList = new DropDownList(studentsList);
        spnDueCount = new javax.swing.JSpinner();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblBorrowList = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        btnCancel = new javax.swing.JButton();
        btnConfirm = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        lblDateNow = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);

        drpStudentList.setSelectedIndex(-1);

        spnDueCount.setModel(new javax.swing.SpinnerNumberModel(1, 1, null, 1));
        spnDueCount.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        tblBorrowList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "ISBN", "Title", "Author", "Genre", "Publisher", "Year", "Copies Left"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, true, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblBorrowList);

        jLabel1.setText("List of books to borrow:");

        jLabel2.setText("Days before due");

        btnCancel.setText("Cancel");
        btnCancel.setPreferredSize(new java.awt.Dimension(76, 30));
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        btnConfirm.setText("Confirm");
        btnConfirm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConfirmActionPerformed(evt);
            }
        });

        jLabel3.setText("Date borrowed:");

        lblDateNow.setText(LocalDate.now().format(DateTimeFormatter.ofPattern("EEEE, MMM dd, yyyy")));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 788, Short.MAX_VALUE)
                    .addComponent(drpStudentList, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblDateNow)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(spnDueCount, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnConfirm)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnCancel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(drpStudentList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(spnDueCount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(lblDateNow))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 8, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnConfirm)
                    .addComponent(btnCancel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        dispose();
    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnConfirmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConfirmActionPerformed
        Student student = null;
        if (drpStudentList.getSelectedItem() == null) {
            JOptionPane.showConfirmDialog(null, "Please select a student from list", "Error",
                    JOptionPane.DEFAULT_OPTION, JOptionPane.ERROR_MESSAGE);
        } else {
            // find student from map
            student = studentsMap.get(drpStudentList.getSelectedItem());

            if (student == null) {
                JOptionPane.showConfirmDialog(null, "Invalid student", "Error",
                        JOptionPane.DEFAULT_OPTION, JOptionPane.ERROR_MESSAGE);
            } else {
                // check if student has pending books for return
                if (student.getStatus().equalsIgnoreCase("PENDING")) {
                    JOptionPane.showConfirmDialog(null, student.getName() + " has pending books for return", "Pending",
                            JOptionPane.DEFAULT_OPTION, JOptionPane.WARNING_MESSAGE);
                } else if (student.getStatus().equalsIgnoreCase("OVERDUE")) {
                    JOptionPane.showConfirmDialog(null, student.getName() + " has overdue books!", "Overdue",
                            JOptionPane.DEFAULT_OPTION, JOptionPane.WARNING_MESSAGE);
                } else {
                    // get list of books to borrow

                    int dueCount = Integer.parseInt(spnDueCount.getValue() + "");
                    List<Transaction> transactions = new ArrayList<>();
                    LocalDate now = LocalDate.now();

                    for (Book book : books) {
                        if (book.getQuantity() < 1) {
                            JOptionPane.showConfirmDialog(null, "One of the book is out of stock", "Notice",
                                    JOptionPane.DEFAULT_OPTION, JOptionPane.ERROR_MESSAGE);
                            return;
                        }

                        student.setStatus("pending");
                        book.setQuantity(book.getQuantity() - 1);
                        Transaction trx = new Transaction(
                                student,
                                book,
                                1,
                                "borrowed",
                                now.format(DateTimeFormatter.ofPattern("MMM dd, yyyy")),
                                now.plusDays(dueCount).format(DateTimeFormatter.ofPattern("MMM dd, yyyy")),
                                "",
                                new Admin(1));
                        transactions.add(trx);
                    }

                    Boolean flag = new TransactionController().doBorrowProcess(transactions);

                    if (flag) {
                        JOptionPane.showConfirmDialog(null, "Borrow transaction created",
                                "Success", JOptionPane.DEFAULT_OPTION, JOptionPane.INFORMATION_MESSAGE);
                        dispose();
                    } else {
                        JOptionPane.showConfirmDialog(null, "Error adding transaction", "Error",
                                JOptionPane.DEFAULT_OPTION, JOptionPane.ERROR_MESSAGE);
                    }
                }

            }
        }

    }//GEN-LAST:event_btnConfirmActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BorrowDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BorrowDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BorrowDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BorrowDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                BorrowDialog dialog = new BorrowDialog(new javax.swing.JFrame(), true, null);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnConfirm;
    private javax.swing.JComboBox<String> drpStudentList;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblDateNow;
    private javax.swing.JSpinner spnDueCount;
    private javax.swing.JTable tblBorrowList;
    // End of variables declaration//GEN-END:variables
}
